--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -50,6 +50,8 @@
 	public final String levelName;
 	public boolean worldChunkLoadOverride;
 	private ArrayList collidingBoundingBoxes;
+	private int lightingUpdatesCounter;
+	static int lightingUpdatesScheduled = 0;
 	private Set positionsToUpdate;
 	private int soundCounter;
 	private List entitiesWithinAABBExcludingEntity;
@@ -125,6 +127,7 @@
 		this.randomSeed = 0L;
 		this.sizeOnDisk = 0L;
 		this.collidingBoundingBoxes = new ArrayList();
+		this.lightingUpdatesCounter = 0;
 		this.positionsToUpdate = new HashSet();
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
@@ -159,6 +162,7 @@
 		this.randomSeed = 0L;
 		this.sizeOnDisk = 0L;
 		this.collidingBoundingBoxes = new ArrayList();
+		this.lightingUpdatesCounter = 0;
 		this.positionsToUpdate = new HashSet();
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
@@ -348,15 +352,19 @@
 	}
 
 	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000 ? (var2 < 0 ? 0 : (var2 >= 128 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
+		return var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000 ? (var2 < 0 ? 0 : (var2 >= 256 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
 	}
 
 	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
+		return var2 >= 0 && var2 < 256 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
+	}
+
+	public boolean doChunksNearChunkExist(int var1, int var2, int var3, int var4) {
+		return this.checkChunksExist(var1 - var4, var2 - var4, var3 - var4, var1 + var4, var2 + var4, var3 + var4);
 	}
 
 	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 128) {
+		if(var5 >= 0 && var2 < 256) {
 			var1 >>= 4;
 			var2 >>= 4;
 			var3 >>= 4;
@@ -394,7 +402,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return false;
 			} else {
 				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -409,7 +417,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -429,7 +437,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return 0;
 			} else {
 				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -450,7 +458,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
@@ -571,7 +579,7 @@
 
 			if(var2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				var5 = 15 - this.skylightSubtracted;
 				if(var5 < 0) {
 					var5 = 0;
@@ -593,7 +601,7 @@
 		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				return true;
 			} else if(!this.chunkExists(var1 >> 4, var3 >> 4)) {
 				return false;
@@ -642,7 +650,7 @@
 	}
 
 	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		if(var3 >= 0 && var3 < 128 && var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
+		if(var3 >= 0 && var3 < 256 && var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
 			int var5 = var2 >> 4;
 			int var6 = var4 >> 4;
 			if(!this.chunkExists(var5, var6)) {
@@ -659,7 +667,7 @@
 	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
 		if(var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
 			if(var3 >= 0) {
-				if(var3 < 128) {
+				if(var3 < 256) {
 					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
 						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
 						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
@@ -917,7 +925,7 @@
 
 		for(int var9 = var3; var9 < var4; ++var9) {
 			for(int var10 = var7; var10 < var8; ++var10) {
-				if(this.blockExists(var9, 64, var10)) {
+				if(this.blockExists(var9, 128, var10)) {
 					for(int var11 = var5 - 1; var11 < var6; ++var11) {
 						Block var12 = Block.blocksList[this.getBlockId(var9, var11, var10)];
 						if(var12 != null) {
@@ -1039,7 +1047,7 @@
 
 	public int getTopSolidOrLiquidBlock(int var1, int var2) {
 		Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-		int var4 = 127;
+		int var4 = 255;
 		var1 &= 15;
 
 		for(var2 &= 15; var4 > 0; --var4) {
@@ -1146,7 +1154,7 @@
 		int var2 = MathHelper.floor_double(var1.posX);
 		int var3 = MathHelper.floor_double(var1.posZ);
 		byte var4 = 16;
-		if(this.checkChunksExist(var2 - var4, 0, var3 - var4, var2 + var4, 128, var3 + var4)) {
+		if(this.checkChunksExist(var2 - var4, 0, var3 - var4, var2 + var4, 256, var3 + var4)) {
 			var1.lastTickPosX = var1.posX;
 			var1.lastTickPosY = var1.posY;
 			var1.lastTickPosZ = var1.posZ;
@@ -1463,18 +1471,29 @@
 	}
 
 	public boolean updatingLighting() {
-		int var1 = 1000;
-
-		while(this.lightingToUpdate.size() > 0) {
-			--var1;
-			if(var1 <= 0) {
-				return true;
+		if(this.lightingUpdatesCounter >= 50) {
+			return false;
+		}
+
+		++this.lightingUpdatesCounter;
+
+		try {
+			int var1 = 500;
+
+			while(this.lightingToUpdate.size() > 0) {
+				--var1;
+				if(var1 <= 0) {
+					return true;
+				}
+
+				((MetadataChunkBlock)this.lightingToUpdate.remove(this.lightingToUpdate.size() - 1)).updateLight(this);
 			}
 
-			((MetadataChunkBlock)this.lightingToUpdate.remove(this.lightingToUpdate.size() - 1)).updateLight(this);
+			return false;
+		} finally {
+			--this.lightingUpdatesCounter;
 		}
 
-		return false;
 	}
 
 	public void scheduleLightingUpdate(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7) {
@@ -1482,12 +1501,27 @@
 	}
 
 	public void scheduleLightingUpdate_do(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8) {
-		int var9 = (var5 + var2) / 2;
-		int var10 = (var7 + var4) / 2;
-		if(this.blockExists(var9, 64, var10)) {
+		++lightingUpdatesScheduled;
+
+		try {
+			if(lightingUpdatesScheduled == 50) {
+				return;
+			}
+
+			int var9 = (var5 + var2) / 2;
+			int var10 = (var7 + var4) / 2;
+			if(!this.blockExists(var9, 128, var10)) {
+				return;
+			}
+
+			Chunk chunk = this.getChunkFromBlockCoords(var9, var10);
+			if(chunk.isChunkRendered || var3 >= 128 && chunk.blocks2 == null) {
+				return;
+			}
+
 			int var11 = this.lightingToUpdate.size();
 			if(var8) {
-				int var12 = 4;
+				int var12 = 5;
 				if(var12 > var11) {
 					var12 = var11;
 				}
@@ -1501,13 +1535,14 @@
 			}
 
 			this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
-			if(this.lightingToUpdate.size() > 100000) {
-				while(this.lightingToUpdate.size() > '\uc350') {
-					this.updatingLighting();
-				}
+			if(this.lightingToUpdate.size() > 1000000) {
+				System.out.println("More than " + 1000000 + " updates, aborting lighting updates");
+				this.lightingToUpdate.clear();
 			}
-
+		} finally {
+			--lightingUpdatesScheduled;
 		}
+
 	}
 
 	public void calculateInitialSkylight() {
@@ -1596,7 +1631,7 @@
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
 				var9 = this.getTopSolidOrLiquidBlock(var7 + var3, var8 + var4);
-				if(var9 >= 0 && var9 < 128 && var14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
+				if(var9 >= 0 && var9 < 256 && var14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
 					var10 = var14.getBlockID(var7, var9 - 1, var8);
 					if(var14.getBlockID(var7, var9, var8) == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4)) {
 						this.setBlockWithNotify(var7 + var3, var9, var8 + var4, Block.snow.blockID);
@@ -1608,6 +1643,22 @@
 				}
 			}
 
+			if(var14.blocks2 != null) {
+				for(var6 = 0; var6 < 160; ++var6) {
+					this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
+					var7 = this.updateLCG >> 2;
+					var8 = var7 & 15;
+					var9 = var7 >> 8 & 15;
+					var10 = var7 >> 16 & 255;
+					byte var15 = (var10 & 128) == 0 ? var14.blocks[var8 << 11 | var9 << 7 | var10] : var14.blocks2[var8 << 11 | var9 << 7 | var10 & 127];
+					if(Block.tickOnLoad[var15]) {
+						Block.blocksList[var15].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
+					}
+				}
+
+				continue;
+			}
+
 			for(var6 = 0; var6 < 80; ++var6) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
 				var7 = this.updateLCG >> 2;
@@ -1848,8 +1899,8 @@
 			var13 = 0;
 		}
 
-		if(var14 > 128) {
-			var14 = 128;
+		if(var14 > 256) {
+			var14 = 256;
 		}
 
 		for(int var15 = var8; var15 <= var10; ++var15) {
--- net/minecraft/src/TerrainTextureManager.java
+++ net/minecraft/src/TerrainTextureManager.java
@@ -7,10 +7,10 @@
 
 public class TerrainTextureManager {
 	private float[] texCols = new float[768];
-	private int[] pixels = new int[5120];
-	private int[] zBuf = new int[5120];
-	private int[] waterBuf = new int[5120];
-	private int[] waterBr = new int[5120];
+	private int[] pixels = new int[9216];
+	private int[] zBuf = new int[9216];
+	private int[] waterBuf = new int[9216];
+	private int[] waterBr = new int[9216];
 	private int[] yBuf = new int[34];
 	private int[] textures = new int[768];
 
@@ -81,7 +81,7 @@
 				var1.noContent = false;
 				Arrays.fill(this.zBuf, 0);
 				Arrays.fill(this.waterBuf, 0);
-				Arrays.fill(this.yBuf, 160);
+				Arrays.fill(this.yBuf, 288);
 
 				for(int var8 = var6 - 1; var8 >= var4; --var8) {
 					for(int var9 = var5 - 1; var9 >= var3; --var9) {
@@ -91,7 +91,7 @@
 						boolean var13 = true;
 
 						for(int var14 = 0; var14 < 128; ++var14) {
-							int var15 = var11 - var10 - var14 + 160 - 16;
+							int var15 = var11 - var10 - var14 + 288 - 16;
 							if(var15 < this.yBuf[var12] || var15 < this.yBuf[var12 + 1]) {
 								Block var16 = Block.blocksList[var2.getBlockId(var9, var14, var8)];
 								if(var16 == null) {
@@ -101,7 +101,7 @@
 									if(var24 == 0 || Block.blocksList[var24].material != Material.water) {
 										float var25 = (float)var14 / 127.0F * 0.6F + 0.4F;
 										float var26 = var2.getBrightness(var9, var14 + 1, var8) * var25;
-										if(var15 >= 0 && var15 < 160) {
+										if(var15 >= 0 && var15 < 288) {
 											int var27 = var12 + var15 * 32;
 											if(var12 >= 0 && var12 <= 32 && this.waterBuf[var27] <= var14) {
 												this.waterBuf[var27] = var14;
@@ -132,7 +132,7 @@
 									int var19;
 									float var20;
 									float var22;
-									if(var15 >= 0 && var15 < 160) {
+									if(var15 >= 0 && var15 < 288) {
 										var18 = var12 + var15 * 32;
 										var19 = this.textures[var16.blockID * 3 + 0];
 										var20 = (var2.getBrightness(var9, var14 + 1, var8) * 0.8F + 0.2F) * var17;
@@ -150,7 +150,7 @@
 										}
 									}
 
-									if(var15 >= -1 && var15 < 159) {
+									if(var15 >= -1 && var15 < 287) {
 										var18 = var12 + (var15 + 1) * 32;
 										var19 = this.textures[var16.blockID * 3 + 1];
 										var20 = var2.getBrightness(var9 - 1, var14, var8) * 0.8F + 0.2F;
@@ -181,10 +181,10 @@
 
 				this.postProcess();
 				if(var1.image == null) {
-					var1.image = new BufferedImage(32, 160, 2);
+					var1.image = new BufferedImage(32, 288, 2);
 				}
 
-				var1.image.setRGB(0, 0, 32, 160, this.pixels, 0, 32);
+				var1.image.setRGB(0, 0, 32, 288, this.pixels, 0, 32);
 				var1.rendered = true;
 			}
 		}
@@ -192,7 +192,7 @@
 
 	private void postProcess() {
 		for(int var1 = 0; var1 < 32; ++var1) {
-			for(int var2 = 0; var2 < 160; ++var2) {
+			for(int var2 = 0; var2 < 288; ++var2) {
 				int var3 = var1 + var2 * 32;
 				if(this.zBuf[var3] == 0) {
 					this.pixels[var3] = 0;
--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -440,6 +440,7 @@
 		double var8 = var2.lastTickPosX + (var2.posX - var2.lastTickPosX) * (double)var1;
 		double var10 = var2.lastTickPosY + (var2.posY - var2.lastTickPosY) * (double)var1;
 		double var12 = var2.lastTickPosZ + (var2.posZ - var2.lastTickPosZ) * (double)var1;
+		int playerY = MathHelper.floor_double(var10);
 		byte var14 = 5;
 		if(this.mc.options.fancyGraphics) {
 			var14 = 10;
@@ -452,6 +453,11 @@
 					var17 = 0;
 				}
 
+				int snowY = var17;
+				if(var17 < playerY) {
+					snowY = playerY;
+				}
+
 				int var18 = var5 - var14;
 				int var19 = var5 + var14;
 				if(var18 < var17) {
@@ -473,7 +479,7 @@
 					double var27 = (double)((float)var16 + 0.5F) - var2.posZ;
 					float var29 = MathHelper.sqrt_double(var25 * var25 + var27 * var27) / (float)var14;
 					var7.startDrawingQuads();
-					float var30 = var3.getBrightness(var15, 128, var16);
+					float var30 = var3.getBrightness(var15, snowY, var16);
 					GL11.glColor4f(var30, var30, var30, (1.0F - var29 * var29) * 0.7F);
 					var7.setTranslationD(-var8 * 1.0D, -var10 * 1.0D, -var12 * 1.0D);
 					var7.addVertexWithUV((double)(var15 + 0), (double)var18, (double)(var16 + 0), (double)(0.0F * var20 + var23), (double)((float)var18 * var20 / 8.0F + var22 * var20 + var24));
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -4,28 +4,57 @@
 	private int chunkX;
 	private int chunkZ;
 	private Chunk[][] chunkArray;
+	private boolean isEmpty;
 	private World worldObj;
 
 	public ChunkCache(World var1, int var2, int var3, int var4, int var5, int var6, int var7) {
+		this(var1, var2, var3, var4, var5, var6, var7, 0);
+	}
+
+	public ChunkCache(World var1, int var2, int var3, int var4, int var5, int var6, int var7, int r) {
 		this.worldObj = var1;
-		this.chunkX = var2 >> 4;
-		this.chunkZ = var4 >> 4;
-		int var8 = var5 >> 4;
-		int var9 = var7 >> 4;
+		this.chunkX = var2 - r >> 4;
+		this.chunkZ = var4 - r >> 4;
+		int var8 = var5 + r >> 4;
+		int var9 = var7 + r >> 4;
 		this.chunkArray = new Chunk[var8 - this.chunkX + 1][var9 - this.chunkZ + 1];
-
-		for(int var10 = this.chunkX; var10 <= var8; ++var10) {
-			for(int var11 = this.chunkZ; var11 <= var9; ++var11) {
-				this.chunkArray[var10 - this.chunkX][var11 - this.chunkZ] = var1.getChunkFromChunkCoords(var10, var11);
-			}
-		}
-
+		this.isEmpty = true;
+
+		int x;
+		int z;
+		Chunk chunk;
+		for(x = this.chunkX; x <= var8; ++x) {
+			for(z = this.chunkZ; z <= var9; ++z) {
+				chunk = var1.getChunkFromChunkCoords(x, z);
+				if(chunk == null) {
+					continue;
+				}
+
+				this.chunkArray[x - this.chunkX][z - this.chunkZ] = chunk;
+			}
+		}
+
+		for(x = var2 >> 4; x <= var5 >> 4; ++x) {
+			for(z = var4 >> 4; z <= var7 >> 4; ++z) {
+				chunk = this.chunkArray[x - this.chunkX][z - this.chunkZ];
+				if(chunk == null || chunk.isChunkRendered || var3 >= 128 && chunk.blocks2 == null) {
+					continue;
+				}
+
+				this.isEmpty = false;
+			}
+		}
+
+	}
+
+	public boolean extendedLevelsInChunkCache() {
+		return this.isEmpty;
 	}
 
 	public int getBlockId(int var1, int var2, int var3) {
 		if(var2 < 0) {
 			return 0;
-		} else if(var2 >= 128) {
+		} else if(var2 >= 256) {
 			return 0;
 		} else {
 			int var4 = (var1 >> 4) - this.chunkX;
@@ -82,7 +111,7 @@
 
 			if(var2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
+			} else if(var2 >= 256) {
 				var5 = 15 - this.worldObj.skylightSubtracted;
 				if(var5 < 0) {
 					var5 = 0;
@@ -102,7 +131,7 @@
 	public int getBlockMetadata(int var1, int var2, int var3) {
 		if(var2 < 0) {
 			return 0;
-		} else if(var2 >= 128) {
+		} else if(var2 >= 256) {
 			return 0;
 		} else {
 			int var4 = (var1 >> 4) - this.chunkX;
--- net/minecraft/src/WorldRenderer.java
+++ net/minecraft/src/WorldRenderer.java
@@ -80,7 +80,6 @@
 
 	public void updateRenderer() {
 		if(this.needsUpdate) {
-			++chunksUpdated;
 			int var1 = this.posX;
 			int var2 = this.posY;
 			int var3 = this.posZ;
@@ -97,7 +96,20 @@
 			var21.addAll(this.tileEntityRenderers);
 			this.tileEntityRenderers.clear();
 			byte var8 = 1;
-			ChunkCache var9 = new ChunkCache(this.worldObj, var1 - var8, var2 - var8, var3 - var8, var4 + var8, var5 + var8, var6 + var8);
+			ChunkCache var9 = new ChunkCache(this.worldObj, var1 - var8, var2 - var8, var3 - var8, var4 + var8, var5 + var8, var6 + var8, var8);
+			if(var9.extendedLevelsInChunkCache()) {
+				HashSet var22 = new HashSet();
+				var22.addAll(this.tileEntityRenderers);
+				var22.removeAll(var21);
+				this.tileEntities.addAll(var22);
+				var21.removeAll(this.tileEntityRenderers);
+				this.tileEntities.removeAll(var21);
+				this.isChunkLit = Chunk.isLit;
+				this.isInitialized = true;
+				return;
+			}
+
+			++chunksUpdated;
 			RenderBlocks var10 = new RenderBlocks(var9);
 
 			for(int var11 = 0; var11 < 2; ++var11) {
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -6,7 +6,7 @@
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		int var6 = var2.nextInt(3) + 4;
 		boolean var7 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 128) {
+		if(var4 >= 1 && var4 + var6 + 1 <= 256) {
 			int var8;
 			int var10;
 			int var11;
@@ -23,7 +23,7 @@
 
 				for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
 					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-						if(var8 >= 0 && var8 < 128) {
+						if(var8 >= 0 && var8 < 256) {
 							var12 = var1.getBlockId(var10, var8, var11);
 							if(var12 != 0 && var12 != Block.leaves.blockID) {
 								var7 = false;
@@ -39,7 +39,7 @@
 				return false;
 			} else {
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
+				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
 					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 
 					int var16;
--- net/minecraft/src/WorldClient.java
+++ net/minecraft/src/WorldClient.java
@@ -91,7 +91,7 @@
 		}
 
 		if(!var3) {
-			this.markBlocksDirty(var1 * 16, 0, var2 * 16, var1 * 16 + 15, 128, var2 * 16 + 15);
+			this.markBlocksDirty(var1 * 16, 0, var2 * 16, var1 * 16 + 15, 256, var2 * 16 + 15);
 		}
 
 	}
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -26,10 +26,14 @@
 	public boolean isChunkRendered;
 	public boolean hasEntities;
 	public long lastSaveTime;
+	public byte[] blocks2;
+	public NibbleArray data2;
+	public NibbleArray skylightMap2;
+	public NibbleArray blocklightMap2;
 
 	public Chunk(World var1, int var2, int var3) {
 		this.chunkTileEntityMap = new HashMap();
-		this.entities = new List[8];
+		this.entities = new List[16];
 		this.isTerrainPopulated = false;
 		this.isModified = false;
 		this.isChunkRendered = false;
@@ -66,13 +70,13 @@
 	}
 
 	public void generateHeightMap() {
-		int var1 = 127;
+		int var1 = this.blocks2 == null ? 127 : 255;
 
 		for(int var2 = 0; var2 < 16; ++var2) {
 			for(int var3 = 0; var3 < 16; ++var3) {
-				int var4 = 127;
+				int var4 = this.blocks2 == null ? 127 : 255;
 
-				for(int var5 = var2 << 11 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1]] == 0; --var4) {
+				for(int var5 = var2 << 11 | var3 << 7; var4 > 0 && Block.lightOpacity[var4 > 128 ? (this.blocks2 == null ? 0 : this.blocks2[var5 + var4 - 129]) : this.blocks[var5 + var4 - 1]] == 0; --var4) {
 				}
 
 				this.heightMap[var3 << 4 | var2] = (byte)var4;
@@ -87,17 +91,38 @@
 	}
 
 	public void generateSkylightMap() {
-		int var1 = 127;
+		int var1 = this.blocks2 == null ? 127 : 255;
 
 		int var2;
 		int var3;
 		for(var2 = 0; var2 < 16; ++var2) {
 			for(var3 = 0; var3 < 16; ++var3) {
-				this.heightMap[var3 << 4 | var2] = -128;
-				this.relightBlock(var2, 127, var3);
-				if((this.heightMap[var3 << 4 | var2] & 255) < var1) {
-					var1 = this.heightMap[var3 << 4 | var2] & 255;
-				}
+				int var4 = this.blocks2 == null ? 127 : 255;
+
+				int var5;
+				for(var5 = var2 << 11 | var3 << 7; var4 > 0 && Block.lightOpacity[var4 > 128 ? (this.blocks2 == null ? 0 : this.blocks2[var5 + var4 - 129]) : this.blocks[var5 + var4 - 1]] == 0; --var4) {
+				}
+
+				this.heightMap[var3 << 4 | var2] = (byte)var4;
+				if(var4 < var1) {
+					var1 = var4;
+				}
+
+				int var6 = 15;
+				int var7 = this.blocks2 == null ? 127 : 255;
+
+				do {
+					var6 -= Block.lightOpacity[var7 > 127 ? (this.blocks2 == null ? 0 : this.blocks2[var5 + var7 - 128]) : this.blocks[var5 + var7]];
+					if(var6 > 0) {
+						if((var7 & 128) == 0) {
+							this.skylightMap.set(var2, var7, var3, var6);
+						} else if(this.blocks2 != null) {
+							this.skylightMap2.set(var2, var7 & 127, var3, var6);
+						}
+					}
+
+					--var7;
+				} while(var7 > 0 && var6 > 0);
 			}
 		}
 
@@ -140,7 +165,7 @@
 			var5 = var2;
 		}
 
-		for(int var6 = var1 << 11 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1]] == 0; --var5) {
+		for(int var6 = var1 << 11 | var3 << 7; var5 > 0 && Block.lightOpacity[var5 > 128 ? (this.blocks2 == null ? 0 : this.blocks2[var6 + var5 - 129]) : this.blocks[var6 + var5 - 1]] == 0; --var5) {
 		}
 
 		if(var5 != var4) {
@@ -152,7 +177,7 @@
 			if(var5 < this.height) {
 				this.height = var5;
 			} else {
-				var7 = 127;
+				var7 = this.blocks2 == null ? 127 : 255;
 
 				for(var8 = 0; var8 < 16; ++var8) {
 					for(var9 = 0; var9 < 16; ++var9) {
@@ -169,12 +194,28 @@
 			var8 = this.zPosition * 16 + var3;
 			if(var5 < var4) {
 				for(var9 = var5; var9 < var4; ++var9) {
+					if((var9 & 128) != 0) {
+						if(this.blocks2 != null) {
+							this.skylightMap2.set(var1, var9 & 127, var3, 15);
+						}
+
+						continue;
+					}
+
 					this.skylightMap.set(var1, var9, var3, 15);
 				}
 			} else {
 				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var7, var4, var8, var7, var5, var8);
 
 				for(var9 = var4; var9 < var5; ++var9) {
+					if((var9 & 128) != 0) {
+						if(this.blocks2 != null) {
+							this.skylightMap2.set(var1, var9 & 127, var3, 0);
+						}
+
+						continue;
+					}
+
 					this.skylightMap.set(var1, var9, var3, 0);
 				}
 			}
@@ -182,7 +223,7 @@
 			var9 = 15;
 
 			int var10;
-			for(var10 = var5; var5 > 0 && var9 > 0; this.skylightMap.set(var1, var5, var3, var9)) {
+			for(var10 = var5; var5 > 0 && var9 > 0;) {
 				--var5;
 				int var11 = Block.lightOpacity[this.getBlockID(var1, var5, var3)];
 				if(var11 == 0) {
@@ -193,6 +234,16 @@
 				if(var9 < 0) {
 					var9 = 0;
 				}
+
+				if((var5 & 128) != 0) {
+					if(this.blocks2 != null) {
+						this.skylightMap2.set(var1, var5 & 127, var3, var9);
+					}
+
+					continue;
+				}
+
+				this.skylightMap.set(var1, var5, var3, var9);
 			}
 
 			while(var5 > 0 && Block.lightOpacity[this.getBlockID(var1, var5 - 1, var3)] == 0) {
@@ -208,33 +259,69 @@
 	}
 
 	public int getBlockID(int var1, int var2, int var3) {
+		if((var2 & 128) != 0) {
+			if(this.blocks2 == null) {
+				return 0;
+			}
+
+			return this.blocks2[var1 << 11 | var3 << 7 | var2 & 127];
+		}
+
 		return this.blocks[var1 << 11 | var3 << 7 | var2];
 	}
 
 	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
 		byte var6 = (byte)var4;
 		int var7 = this.heightMap[var3 << 4 | var1] & 255;
-		int var8 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var8 == var4 && this.data.get(var1, var2, var3) == var5) {
+		int var8 = (var2 & 128) == 0 ? this.blocks[var1 << 11 | var3 << 7 | var2] & 255 : (this.blocks2 == null ? 0 : this.blocks2[var1 << 11 | var3 << 7 | var2 & 127] & 255);
+		if(var8 == var4 && ((var2 & 128) == 0 ? this.data.get(var1, var2, var3) : (this.blocks2 == null ? 0 : this.data2.get(var1, var2 & 127, var3))) == var5) {
 			return false;
 		} else {
+			boolean generateSkylightMap = false;
+			if((var2 & 128) != 0 && this.blocks2 == null) {
+				if(var4 == 0) {
+					return false;
+				}
+
+				this.blocks2 = new byte[this.blocks.length];
+				this.data2 = new NibbleArray(this.blocks.length);
+				this.skylightMap2 = new NibbleArray(this.blocks.length);
+				this.blocklightMap2 = new NibbleArray(this.blocks.length);
+				generateSkylightMap = var2 >= var7;
+			}
+
 			int var9 = this.xPosition * 16 + var1;
 			int var10 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var6;
+			if((var2 & 128) == 0) {
+				this.blocks[var1 << 11 | var3 << 7 | var2] = var6;
+			} else {
+				this.blocks2[var1 << 11 | var3 << 7 | var2 & 127] = var6;
+			}
+
 			if(var8 != 0 && !this.worldObj.multiplayerWorld) {
 				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
 			}
 
-			this.data.set(var1, var2, var3, var5);
-			if(Block.lightOpacity[var6] != 0) {
-				if(var2 >= var7) {
-					this.relightBlock(var1, var2 + 1, var3);
+			if((var2 & 128) == 0) {
+				this.data.set(var1, var2, var3, var5);
+			} else {
+				this.data2.set(var1, var2 & 127, var3, var5);
+			}
+
+			if(generateSkylightMap) {
+				this.generateSkylightMap();
+			} else {
+				if(Block.lightOpacity[var6] != 0) {
+					if(var2 >= var7) {
+						this.relightBlock(var1, var2 + 1, var3);
+					}
+				} else if(var2 == var7 - 1) {
+					this.relightBlock(var1, var2, var3);
 				}
-			} else if(var2 == var7 - 1) {
-				this.relightBlock(var1, var2, var3);
+
+				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var9, var2, var10, var9, var2, var10);
 			}
 
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var9, var2, var10, var9, var2, var10);
 			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var9, var2, var10, var9, var2, var10);
 			this.updateSkylight_do(var1, var3);
 			if(var4 != 0) {
@@ -249,27 +336,55 @@
 	public boolean setBlockID(int var1, int var2, int var3, int var4) {
 		byte var5 = (byte)var4;
 		int var6 = this.heightMap[var3 << 4 | var1] & 255;
-		int var7 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
+		int var7 = (var2 & 128) == 0 ? this.blocks[var1 << 11 | var3 << 7 | var2] & 255 : (this.blocks2 == null ? 0 : this.blocks2[var1 << 11 | var3 << 7 | var2 & 127] & 255);
 		if(var7 == var4) {
 			return false;
 		} else {
+			boolean generateSkylightMap = false;
+			if((var2 & 128) != 0 && this.blocks2 == null) {
+				if(var4 == 0) {
+					return false;
+				}
+
+				this.blocks2 = new byte[this.blocks.length];
+				this.data2 = new NibbleArray(this.blocks.length);
+				this.skylightMap2 = new NibbleArray(this.blocks.length);
+				this.blocklightMap2 = new NibbleArray(this.blocks.length);
+				generateSkylightMap = var2 >= var6;
+			}
+
 			int var8 = this.xPosition * 16 + var1;
 			int var9 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var5;
+			if((var2 & 128) == 0) {
+				this.blocks[var1 << 11 | var3 << 7 | var2] = var5;
+			} else {
+				this.blocks2[var1 << 11 | var3 << 7 | var2 & 127] = var5;
+			}
+
 			if(var7 != 0) {
 				Block.blocksList[var7].onBlockRemoval(this.worldObj, var8, var2, var9);
 			}
 
-			this.data.set(var1, var2, var3, 0);
-			if(Block.lightOpacity[var5] != 0) {
-				if(var2 >= var6) {
-					this.relightBlock(var1, var2 + 1, var3);
+			if((var2 & 128) == 0) {
+				this.data.set(var1, var2, var3, 0);
+			} else {
+				this.data2.set(var1, var2 & 127, var3, 0);
+			}
+
+			if(generateSkylightMap) {
+				this.generateSkylightMap();
+			} else {
+				if(Block.lightOpacity[var5] != 0) {
+					if(var2 >= var6) {
+						this.relightBlock(var1, var2 + 1, var3);
+					}
+				} else if(var2 == var6 - 1) {
+					this.relightBlock(var1, var2, var3);
 				}
-			} else if(var2 == var6 - 1) {
-				this.relightBlock(var1, var2, var3);
+
+				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var8, var2, var9, var8, var2, var9);
 			}
 
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var8, var2, var9, var8, var2, var9);
 			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var8, var2, var9, var8, var2, var9);
 			this.updateSkylight_do(var1, var3);
 			if(var4 != 0 && !this.worldObj.multiplayerWorld) {
@@ -282,19 +397,64 @@
 	}
 
 	public int getBlockMetadata(int var1, int var2, int var3) {
+		if((var2 & 128) != 0) {
+			if(this.blocks2 == null) {
+				return 0;
+			}
+
+			return this.data2.get(var1, var2 & 127, var3);
+		}
+
 		return this.data.get(var1, var2, var3);
 	}
 
 	public void setBlockMetadata(int var1, int var2, int var3, int var4) {
+		if((var2 & 128) != 0) {
+			if(this.blocks2 == null) {
+				return;
+			}
+
+			this.isModified = true;
+			this.data2.set(var1, var2 & 127, var3, var4);
+			return;
+		}
+
 		this.isModified = true;
 		this.data.set(var1, var2, var3, var4);
 	}
 
 	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
+		if((var3 & 128) != 0) {
+			if(this.blocks2 == null) {
+				return this.canBlockSeeTheSky(var2, var3, var4) ? var1.defaultLightValue : 0;
+			}
+
+			return var1 == EnumSkyBlock.Sky ? this.skylightMap2.get(var2, var3 & 127, var4) : (var1 == EnumSkyBlock.Block ? this.blocklightMap2.get(var2, var3 & 127, var4) : 0);
+		}
+
 		return var1 == EnumSkyBlock.Sky ? this.skylightMap.get(var2, var3, var4) : (var1 == EnumSkyBlock.Block ? this.blocklightMap.get(var2, var3, var4) : 0);
 	}
 
 	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
+		if((var3 & 128) != 0) {
+			if(this.blocks2 == null) {
+				this.blocks2 = new byte[this.blocks.length];
+				this.data2 = new NibbleArray(this.blocks.length);
+				this.skylightMap2 = new NibbleArray(this.blocks.length);
+				this.blocklightMap2 = new NibbleArray(this.blocks.length);
+				this.generateSkylightMap();
+			}
+
+			this.isModified = true;
+			if(var1 == EnumSkyBlock.Sky) {
+				this.skylightMap2.set(var2, var3 & 127, var4, var5);
+			} else if(var1 == EnumSkyBlock.Block) {
+				this.blocklightMap2.set(var2, var3 & 127, var4, var5);
+			}
+
+			return;
+		}
+
 		this.isModified = true;
 		if(var1 == EnumSkyBlock.Sky) {
 			this.skylightMap.set(var2, var3, var4, var5);
@@ -309,6 +469,25 @@
 	}
 
 	public int getBlockLightValue(int var1, int var2, int var3, int var4) {
+		if((var2 & 128) != 0) {
+			if(this.blocks2 == null) {
+				return var4 < EnumSkyBlock.Sky.defaultLightValue ? EnumSkyBlock.Sky.defaultLightValue - var4 : 0;
+			}
+
+			int var5 = this.skylightMap2.get(var1, var2 & 127, var3);
+			if(var5 > 0) {
+				isLit = true;
+			}
+
+			var5 -= var4;
+			int var6 = this.blocklightMap2.get(var1, var2 & 127, var3);
+			if(var6 > var5) {
+				var5 = var6;
+			}
+
+			return var5;
+		}
+
 		int var5 = this.skylightMap.get(var1, var2, var3);
 		if(var5 > 0) {
 			isLit = true;
@@ -499,16 +678,32 @@
 	}
 
 	public int setChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
+		if(var6 > 128 && this.blocks2 == null) {
+			this.blocks2 = new byte[this.blocks.length];
+			this.data2 = new NibbleArray(this.blocks.length);
+			this.skylightMap2 = new NibbleArray(this.blocks.length);
+			this.blocklightMap2 = new NibbleArray(this.blocks.length);
+		}
+
 		int var9;
 		int var10;
 		int var11;
 		int var12;
 		for(var9 = var2; var9 < var5; ++var9) {
 			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = var9 << 11 | var10 << 7 | var3;
-				var12 = var6 - var3;
-				System.arraycopy(var1, var8, this.blocks, var11, var12);
-				var8 += var12;
+				if(var3 < 128) {
+					var11 = var9 << 11 | var10 << 7 | var3;
+					var12 = (var6 > 128 ? 128 : var6) - var3;
+					System.arraycopy(var1, var8, this.blocks, var11, var12);
+					var8 += var12;
+				}
+
+				if(var6 > 128) {
+					var11 = var9 << 11 | var10 << 7 | (var3 < 128 ? 0 : var3 & 127);
+					var12 = var6 - (var3 < 128 ? 128 : var3);
+					System.arraycopy(var1, var8, this.blocks2, var11, var12);
+					var8 += var12;
+				}
 			}
 		}
 
@@ -516,28 +711,55 @@
 
 		for(var9 = var2; var9 < var5; ++var9) {
 			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.data.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.blocklightMap.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.skylightMap.data, var11, var12);
-				var8 += var12;
+				if(var3 < 128) {
+					var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
+					var12 = ((var6 > 128 ? 128 : var6) - var3) / 2;
+					System.arraycopy(var1, var8, this.data.data, var11, var12);
+					var8 += var12;
+				}
+
+				if(var6 > 128) {
+					var11 = (var9 << 11 | var10 << 7 | (var3 < 128 ? 0 : var3 & 127)) >> 1;
+					var12 = (var6 - (var3 < 128 ? 128 : var3)) / 2;
+					System.arraycopy(var1, var8, this.data2.data, var11, var12);
+					var8 += var12;
+				}
+			}
+		}
+
+		for(var9 = var2; var9 < var5; ++var9) {
+			for(var10 = var4; var10 < var7; ++var10) {
+				if(var3 < 128) {
+					var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
+					var12 = ((var6 > 128 ? 128 : var6) - var3) / 2;
+					System.arraycopy(var1, var8, this.blocklightMap.data, var11, var12);
+					var8 += var12;
+				}
+
+				if(var6 > 128) {
+					var11 = (var9 << 11 | var10 << 7 | (var3 < 128 ? 0 : var3 & 127)) >> 1;
+					var12 = (var6 - (var3 < 128 ? 128 : var3)) / 2;
+					System.arraycopy(var1, var8, this.blocklightMap2.data, var11, var12);
+					var8 += var12;
+				}
+			}
+		}
+
+		for(var9 = var2; var9 < var5; ++var9) {
+			for(var10 = var4; var10 < var7; ++var10) {
+				if(var3 < 128) {
+					var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
+					var12 = ((var6 > 128 ? 128 : var6) - var3) / 2;
+					System.arraycopy(var1, var8, this.skylightMap.data, var11, var12);
+					var8 += var12;
+				}
+
+				if(var6 > 128) {
+					var11 = (var9 << 11 | var10 << 7 | (var3 < 128 ? 0 : var3 & 127)) >> 1;
+					var12 = (var6 - (var3 < 128 ? 128 : var3)) / 2;
+					System.arraycopy(var1, var8, this.skylightMap2.data, var11, var12);
+					var8 += var12;
+				}
 			}
 		}
 
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -199,7 +199,7 @@
 		}
 
 		this.renderChunksWide = var1 / 16 + 1;
-		this.renderChunksTall = 8;
+		this.renderChunksTall = 16;
 		this.renderChunksDeep = var1 / 16 + 1;
 		this.worldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
 		this.sortedWorldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
--- net/minecraft/src/ChunkLoader.java
+++ net/minecraft/src/ChunkLoader.java
@@ -110,6 +110,13 @@
 		var3.setByteArray("Data", var1.data.data);
 		var3.setByteArray("SkyLight", var1.skylightMap.data);
 		var3.setByteArray("BlockLight", var1.blocklightMap.data);
+		if(var1.blocks2 != null) {
+			var3.setByteArray("Blocks2", var1.blocks2);
+			var3.setByteArray("Data2", var1.data2.data);
+			var3.setByteArray("SkyLight2", var1.skylightMap2.data);
+			var3.setByteArray("BlockLight2", var1.blocklightMap2.data);
+		}
+
 		var3.setByteArray("HeightMap", var1.heightMap);
 		var3.setBoolean("TerrainPopulated", var1.isTerrainPopulated);
 		var1.hasEntities = false;
@@ -152,6 +159,13 @@
 		var4.data = new NibbleArray(var1.getByteArray("Data"));
 		var4.skylightMap = new NibbleArray(var1.getByteArray("SkyLight"));
 		var4.blocklightMap = new NibbleArray(var1.getByteArray("BlockLight"));
+		if(var1.hasKey("Blocks2")) {
+			var4.blocks2 = var1.getByteArray("Blocks2");
+			var4.data2 = new NibbleArray(var1.getByteArray("Data2"));
+			var4.skylightMap2 = new NibbleArray(var1.getByteArray("SkyLight2"));
+			var4.blocklightMap2 = new NibbleArray(var1.getByteArray("BlockLight2"));
+		}
+
 		var4.heightMap = var1.getByteArray("HeightMap");
 		var4.isTerrainPopulated = var1.getBoolean("TerrainPopulated");
 		if(!var4.data.isValid()) {
--- net/minecraft/src/SpawnerAnimals.java
+++ net/minecraft/src/SpawnerAnimals.java
@@ -27,9 +27,10 @@
 	}
 
 	protected ChunkPosition getRandomSpawningPointInChunk(World var1, int var2, int var3) {
-		int var4 = var2 + var1.rand.nextInt(16);
-		int var5 = var1.rand.nextInt(128);
-		int var6 = var3 + var1.rand.nextInt(16);
+		Chunk chunk = var1.getChunkFromChunkCoords(var2, var3);
+		int var4 = var2 * 16 + var1.rand.nextInt(16);
+		int var6 = var3 * 16 + var1.rand.nextInt(16);
+		int var5 = var1.rand.nextInt(chunk == null ? 256 : (chunk.blocks2 == null ? 127 : 255));
 		return new ChunkPosition(var4, var5, var6);
 	}
 
@@ -67,7 +68,7 @@
 			} while(var1.rand.nextInt(10) != 0);
 
 			var7 = var1.rand.nextInt(this.entities.length);
-			ChunkPosition var28 = this.getRandomSpawningPointInChunk(var1, var27.chunkXPos * 16, var27.chunkZPos * 16);
+			ChunkPosition var28 = this.getRandomSpawningPointInChunk(var1, var27.chunkXPos, var27.chunkZPos);
 			var9 = var28.x;
 			var10 = var28.y;
 			int var11 = var28.z;
--- net/minecraft/src/MetadataChunkBlock.java
+++ net/minecraft/src/MetadataChunkBlock.java
@@ -20,16 +20,32 @@
 	}
 
 	public void updateLight(World var1) {
-		int var2 = this.maxX - this.minX;
-		int var3 = this.maxY - this.minY;
-		int var4 = this.maxZ - this.minZ;
+		int var2 = this.maxX - this.minX + 1;
+		int var3 = this.maxY - this.minY + 1;
+		int var4 = this.maxZ - this.minZ + 1;
 		int var5 = var2 * var3 * var4;
-		if(var5 <= -Short.MIN_VALUE) {
+		if(var5 <= 74273) {
 			for(int var6 = this.minX; var6 <= this.maxX; ++var6) {
 				for(int var7 = this.minZ; var7 <= this.maxZ; ++var7) {
-					if(var1.blockExists(var6, 0, var7)) {
+					boolean blockExists = var1.doChunksNearChunkExist(var6, 0, var7, 1);
+					if(blockExists) {
+						Chunk chunk = var1.getChunkFromChunkCoords(var6 >> 4, var7 >> 4);
+						if(chunk.isChunkRendered || this.minY >= 128 && chunk.blocks2 == null) {
+							blockExists = false;
+						}
+					}
+
+					if(blockExists) {
+						if(this.minY < 0) {
+							this.minY = 0;
+						}
+
+						if(this.maxY >= 256) {
+							this.maxY = 255;
+						}
+
 						for(int var8 = this.minY; var8 <= this.maxY; ++var8) {
-							if(var8 >= 0 && var8 < 128) {
+							{
 								int var9 = var1.getSavedLightValue(this.skyBlock, var6, var8, var7);
 								boolean var10 = false;
 								int var11 = var1.getBlockId(var6, var8, var7);
@@ -117,6 +133,8 @@
 				}
 			}
 
+		} else {
+			System.out.println("Light too large, skipping!");
 		}
 	}
 
--- net/minecraft/src/BlockDoor.java
+++ net/minecraft/src/BlockDoor.java
@@ -190,6 +190,6 @@
 	}
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var3 >= 127 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+		return var3 >= 255 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
 	}
 }
--- net/minecraft/src/SpawnerClient.java
+++ net/minecraft/src/SpawnerClient.java
@@ -9,9 +9,10 @@
 	}
 
 	protected ChunkPosition getRandomSpawningPointInChunk(World var1, int var2, int var3) {
-		int var4 = var2 + var1.rand.nextInt(16);
-		int var5 = var1.rand.nextInt(var1.rand.nextInt(120) + 8);
-		int var6 = var3 + var1.rand.nextInt(16);
+		Chunk chunk = var1.getChunkFromChunkCoords(var2, var3);
+		int var4 = var2 * 16 + var1.rand.nextInt(16);
+		int var6 = var3 * 16 + var1.rand.nextInt(16);
+		int var5 = var1.rand.nextInt(var1.rand.nextInt(chunk == null ? 248 : (chunk.blocks2 == null ? 119 : 247)) + 8);
 		return new ChunkPosition(var4, var5, var6);
 	}
 }
